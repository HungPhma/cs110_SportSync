/**
 * @since 3.3.0
 */
import type * as Equal from "./Equal.js";
import * as Equivalence from "./Equivalence.js";
import type { Pipeable } from "./Pipeable.js";
import type { Covariant } from "./Types.js";
/**
 * @since 3.3.0
 * @category symbols
 */
export declare const RedactedTypeId: unique symbol;
/**
 * @since 3.3.0
 * @category symbols
 */
export type RedactedTypeId = typeof RedactedTypeId;
/**
 * @since 3.3.0
 * @category models
 */
export interface Redacted<out A = string> extends Redacted.Variance<A>, Equal.Equal, Pipeable {
}
/**
 * @since 3.3.0
 */
export declare namespace Redacted {
    /**
     * @since 3.3.0
     * @category models
     */
    interface Variance<out A> {
        readonly [RedactedTypeId]: {
            readonly _A: Covariant<A>;
        };
    }
    /**
     * @since 3.3.0
     * @category type-level
     */
    type Value<T extends Redacted<any>> = [T] extends [Redacted<infer _A>] ? _A : never;
}
/**
 * @since 3.3.0
 * @category refinements
 */
export declare const isRedacted: (u: unknown) => u is Redacted<unknown>;
/**
 * @since 3.3.0
 * @category constructors
 */
export declare const make: <A>(value: A) => Redacted<A>;
/**
 * @since 3.3.0
 * @category getters
 */
export declare const value: <A>(self: Redacted<A>) => A;
/**
 * @since 3.3.0
 * @category unsafe
 */
export declare const unsafeWipe: <A>(self: Redacted<A>) => boolean;
/**
 * @category equivalence
 * @since 3.3.0
 */
export declare const getEquivalence: <A>(isEquivalent: Equivalence.Equivalence<A>) => Equivalence.Equivalence<Redacted<A>>;
//# sourceMappingURL=Redacted.d.ts.map